<?php
/**
 * FileInfo
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CBRAIN API
 *
 * API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * FileInfo Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class FileInfo implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FileInfo';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'userfile_id' => 'int',
        'name' => 'string',
        'group' => 'string',
        'gid' => 'int',
        'owner' => 'string',
        'uid' => 'int',
        'permissions' => 'int',
        'size' => 'int',
        'state_ok' => 'bool',
        'message' => 'string',
        'symbolic_type' => 'string',
        'atime' => 'int',
        'mtime' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'userfile_id' => 'int64',
        'name' => null,
        'group' => null,
        'gid' => 'int64',
        'owner' => null,
        'uid' => 'int64',
        'permissions' => 'int64',
        'size' => 'int64',
        'state_ok' => null,
        'message' => null,
        'symbolic_type' => null,
        'atime' => null,
        'mtime' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'userfile_id' => 'userfile_id',
        'name' => 'name',
        'group' => 'group',
        'gid' => 'gid',
        'owner' => 'owner',
        'uid' => 'uid',
        'permissions' => 'permissions',
        'size' => 'size',
        'state_ok' => 'state_ok',
        'message' => 'message',
        'symbolic_type' => 'symbolic_type',
        'atime' => 'atime',
        'mtime' => 'mtime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'userfile_id' => 'setUserfileId',
        'name' => 'setName',
        'group' => 'setGroup',
        'gid' => 'setGid',
        'owner' => 'setOwner',
        'uid' => 'setUid',
        'permissions' => 'setPermissions',
        'size' => 'setSize',
        'state_ok' => 'setStateOk',
        'message' => 'setMessage',
        'symbolic_type' => 'setSymbolicType',
        'atime' => 'setAtime',
        'mtime' => 'setMtime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'userfile_id' => 'getUserfileId',
        'name' => 'getName',
        'group' => 'getGroup',
        'gid' => 'getGid',
        'owner' => 'getOwner',
        'uid' => 'getUid',
        'permissions' => 'getPermissions',
        'size' => 'getSize',
        'state_ok' => 'getStateOk',
        'message' => 'getMessage',
        'symbolic_type' => 'getSymbolicType',
        'atime' => 'getAtime',
        'mtime' => 'getMtime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['userfile_id'] = isset($data['userfile_id']) ? $data['userfile_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['group'] = isset($data['group']) ? $data['group'] : null;
        $this->container['gid'] = isset($data['gid']) ? $data['gid'] : null;
        $this->container['owner'] = isset($data['owner']) ? $data['owner'] : null;
        $this->container['uid'] = isset($data['uid']) ? $data['uid'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['state_ok'] = isset($data['state_ok']) ? $data['state_ok'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['symbolic_type'] = isset($data['symbolic_type']) ? $data['symbolic_type'] : null;
        $this->container['atime'] = isset($data['atime']) ? $data['atime'] : null;
        $this->container['mtime'] = isset($data['mtime']) ? $data['mtime'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets userfile_id
     *
     * @return int
     */
    public function getUserfileId()
    {
        return $this->container['userfile_id'];
    }

    /**
     * Sets userfile_id
     *
     * @param int $userfile_id id of the userfile
     *
     * @return $this
     */
    public function setUserfileId($userfile_id)
    {
        $this->container['userfile_id'] = $userfile_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name the base filename
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string $group string representation of gid, the name of the group
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets gid
     *
     * @return int
     */
    public function getGid()
    {
        return $this->container['gid'];
    }

    /**
     * Sets gid
     *
     * @param int $gid numeric group id of the file
     *
     * @return $this
     */
    public function setGid($gid)
    {
        $this->container['gid'] = $gid;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return string
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param string $owner string representation of uid, the name of the owner
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets uid
     *
     * @return int
     */
    public function getUid()
    {
        return $this->container['uid'];
    }

    /**
     * Sets uid
     *
     * @param int $uid numeric uid of owner
     *
     * @return $this
     */
    public function setUid($uid)
    {
        $this->container['uid'] = $uid;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return int
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param int $permissions an int interpreted in octal, e.g. 0640
     *
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size size of file in bytes
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets state_ok
     *
     * @return bool
     */
    public function getStateOk()
    {
        return $this->container['state_ok'];
    }

    /**
     * Sets state_ok
     *
     * @param bool $state_ok flag that tell whether or not it is OK to register/unregister
     *
     * @return $this
     */
    public function setStateOk($state_ok)
    {
        $this->container['state_ok'] = $state_ok;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message a message to give more information about the state_ok flag
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets symbolic_type
     *
     * @return string
     */
    public function getSymbolicType()
    {
        return $this->container['symbolic_type'];
    }

    /**
     * Sets symbolic_type
     *
     * @param string $symbolic_type one of :regular, :symlink, :directory
     *
     * @return $this
     */
    public function setSymbolicType($symbolic_type)
    {
        $this->container['symbolic_type'] = $symbolic_type;

        return $this;
    }

    /**
     * Gets atime
     *
     * @return int
     */
    public function getAtime()
    {
        return $this->container['atime'];
    }

    /**
     * Sets atime
     *
     * @param int $atime access time (an int, since Epoch)
     *
     * @return $this
     */
    public function setAtime($atime)
    {
        $this->container['atime'] = $atime;

        return $this;
    }

    /**
     * Gets mtime
     *
     * @return int
     */
    public function getMtime()
    {
        return $this->container['mtime'];
    }

    /**
     * Sets mtime
     *
     * @param int $mtime modification time (an int, since Epoch)
     *
     * @return $this
     */
    public function setMtime($mtime)
    {
        $this->container['mtime'] = $mtime;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


