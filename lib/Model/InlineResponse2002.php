<?php
/**
 * InlineResponse2002
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CBRAIN API
 *
 * REST API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InlineResponse2002 Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2002 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_2';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'notice' => 'string',
        'error' => 'string',
        'newly_registered_userfiles' => '\Swagger\Client\Model\Userfile[]',
        'previously_registered_userfiles' => '\Swagger\Client\Model\Userfile[]',
        'userfiles_in_transit' => '\Swagger\Client\Model\Userfile[]',
        'num_unregistered' => 'float',
        'num_erased' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'notice' => null,
        'error' => null,
        'newly_registered_userfiles' => null,
        'previously_registered_userfiles' => null,
        'userfiles_in_transit' => null,
        'num_unregistered' => null,
        'num_erased' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'notice' => 'notice',
        'error' => 'error',
        'newly_registered_userfiles' => 'newly_registered_userfiles',
        'previously_registered_userfiles' => 'previously_registered_userfiles',
        'userfiles_in_transit' => 'userfiles_in_transit',
        'num_unregistered' => 'num_unregistered',
        'num_erased' => 'num_erased'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'notice' => 'setNotice',
        'error' => 'setError',
        'newly_registered_userfiles' => 'setNewlyRegisteredUserfiles',
        'previously_registered_userfiles' => 'setPreviouslyRegisteredUserfiles',
        'userfiles_in_transit' => 'setUserfilesInTransit',
        'num_unregistered' => 'setNumUnregistered',
        'num_erased' => 'setNumErased'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'notice' => 'getNotice',
        'error' => 'getError',
        'newly_registered_userfiles' => 'getNewlyRegisteredUserfiles',
        'previously_registered_userfiles' => 'getPreviouslyRegisteredUserfiles',
        'userfiles_in_transit' => 'getUserfilesInTransit',
        'num_unregistered' => 'getNumUnregistered',
        'num_erased' => 'getNumErased'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['notice'] = isset($data['notice']) ? $data['notice'] : null;
        $this->container['error'] = isset($data['error']) ? $data['error'] : null;
        $this->container['newly_registered_userfiles'] = isset($data['newly_registered_userfiles']) ? $data['newly_registered_userfiles'] : null;
        $this->container['previously_registered_userfiles'] = isset($data['previously_registered_userfiles']) ? $data['previously_registered_userfiles'] : null;
        $this->container['userfiles_in_transit'] = isset($data['userfiles_in_transit']) ? $data['userfiles_in_transit'] : null;
        $this->container['num_unregistered'] = isset($data['num_unregistered']) ? $data['num_unregistered'] : null;
        $this->container['num_erased'] = isset($data['num_erased']) ? $data['num_erased'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets notice
     *
     * @return string
     */
    public function getNotice()
    {
        return $this->container['notice'];
    }

    /**
     * Sets notice
     *
     * @param string $notice notice
     *
     * @return $this
     */
    public function setNotice($notice)
    {
        $this->container['notice'] = $notice;

        return $this;
    }

    /**
     * Gets error
     *
     * @return string
     */
    public function getError()
    {
        return $this->container['error'];
    }

    /**
     * Sets error
     *
     * @param string $error error
     *
     * @return $this
     */
    public function setError($error)
    {
        $this->container['error'] = $error;

        return $this;
    }

    /**
     * Gets newly_registered_userfiles
     *
     * @return \Swagger\Client\Model\Userfile[]
     */
    public function getNewlyRegisteredUserfiles()
    {
        return $this->container['newly_registered_userfiles'];
    }

    /**
     * Sets newly_registered_userfiles
     *
     * @param \Swagger\Client\Model\Userfile[] $newly_registered_userfiles newly_registered_userfiles
     *
     * @return $this
     */
    public function setNewlyRegisteredUserfiles($newly_registered_userfiles)
    {
        $this->container['newly_registered_userfiles'] = $newly_registered_userfiles;

        return $this;
    }

    /**
     * Gets previously_registered_userfiles
     *
     * @return \Swagger\Client\Model\Userfile[]
     */
    public function getPreviouslyRegisteredUserfiles()
    {
        return $this->container['previously_registered_userfiles'];
    }

    /**
     * Sets previously_registered_userfiles
     *
     * @param \Swagger\Client\Model\Userfile[] $previously_registered_userfiles previously_registered_userfiles
     *
     * @return $this
     */
    public function setPreviouslyRegisteredUserfiles($previously_registered_userfiles)
    {
        $this->container['previously_registered_userfiles'] = $previously_registered_userfiles;

        return $this;
    }

    /**
     * Gets userfiles_in_transit
     *
     * @return \Swagger\Client\Model\Userfile[]
     */
    public function getUserfilesInTransit()
    {
        return $this->container['userfiles_in_transit'];
    }

    /**
     * Sets userfiles_in_transit
     *
     * @param \Swagger\Client\Model\Userfile[] $userfiles_in_transit userfiles_in_transit
     *
     * @return $this
     */
    public function setUserfilesInTransit($userfiles_in_transit)
    {
        $this->container['userfiles_in_transit'] = $userfiles_in_transit;

        return $this;
    }

    /**
     * Gets num_unregistered
     *
     * @return float
     */
    public function getNumUnregistered()
    {
        return $this->container['num_unregistered'];
    }

    /**
     * Sets num_unregistered
     *
     * @param float $num_unregistered num_unregistered
     *
     * @return $this
     */
    public function setNumUnregistered($num_unregistered)
    {
        $this->container['num_unregistered'] = $num_unregistered;

        return $this;
    }

    /**
     * Gets num_erased
     *
     * @return float
     */
    public function getNumErased()
    {
        return $this->container['num_erased'];
    }

    /**
     * Sets num_erased
     *
     * @param float $num_erased num_erased
     *
     * @return $this
     */
    public function setNumErased($num_erased)
    {
        $this->container['num_erased'] = $num_erased;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


