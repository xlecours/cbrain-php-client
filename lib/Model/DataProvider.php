<?php
/**
 * DataProvider
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CBRAIN API
 *
 * API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * DataProvider Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DataProvider implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DataProvider';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'type' => 'string',
        'user_id' => 'int',
        'group_id' => 'int',
        'online' => 'string',
        'read_only' => 'string',
        'description' => 'string',
        'is_browsable' => 'string',
        'is_fast_syncing' => 'string',
        'allow_file_owner_change' => 'string',
        'content_storage_shared_between_users' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'type' => null,
        'user_id' => 'int64',
        'group_id' => 'int64',
        'online' => 'boolean',
        'read_only' => 'boolean',
        'description' => null,
        'is_browsable' => 'boolean',
        'is_fast_syncing' => 'boolean',
        'allow_file_owner_change' => 'boolean',
        'content_storage_shared_between_users' => 'boolean'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'type' => 'type',
        'user_id' => 'user_id',
        'group_id' => 'group_id',
        'online' => 'online',
        'read_only' => 'read_only',
        'description' => 'description',
        'is_browsable' => 'is_browsable',
        'is_fast_syncing' => 'is_fast_syncing',
        'allow_file_owner_change' => 'allow_file_owner_change',
        'content_storage_shared_between_users' => 'content_storage_shared_between_users'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'type' => 'setType',
        'user_id' => 'setUserId',
        'group_id' => 'setGroupId',
        'online' => 'setOnline',
        'read_only' => 'setReadOnly',
        'description' => 'setDescription',
        'is_browsable' => 'setIsBrowsable',
        'is_fast_syncing' => 'setIsFastSyncing',
        'allow_file_owner_change' => 'setAllowFileOwnerChange',
        'content_storage_shared_between_users' => 'setContentStorageSharedBetweenUsers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'type' => 'getType',
        'user_id' => 'getUserId',
        'group_id' => 'getGroupId',
        'online' => 'getOnline',
        'read_only' => 'getReadOnly',
        'description' => 'getDescription',
        'is_browsable' => 'getIsBrowsable',
        'is_fast_syncing' => 'getIsFastSyncing',
        'allow_file_owner_change' => 'getAllowFileOwnerChange',
        'content_storage_shared_between_users' => 'getContentStorageSharedBetweenUsers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['online'] = isset($data['online']) ? $data['online'] : null;
        $this->container['read_only'] = isset($data['read_only']) ? $data['read_only'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_browsable'] = isset($data['is_browsable']) ? $data['is_browsable'] : null;
        $this->container['is_fast_syncing'] = isset($data['is_fast_syncing']) ? $data['is_fast_syncing'] : null;
        $this->container['allow_file_owner_change'] = isset($data['allow_file_owner_change']) ? $data['allow_file_owner_change'] : null;
        $this->container['content_storage_shared_between_users'] = isset($data['content_storage_shared_between_users']) ? $data['content_storage_shared_between_users'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Unique ID for the Data Provider.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the Data Provider.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of Data Provider, which usually indicates whether it is a local Data Provider, has a flat internal directory structure, or is meant for file uploading to CBRAIN.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return int
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param int $user_id Creator and owner of the Data Provider.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return int
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param int $group_id ID of the group that has access to this Data Provider.
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets online
     *
     * @return string
     */
    public function getOnline()
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param string $online Boolean variable that indicates whether the system hosting the Data Provider is accessible.
     *
     * @return $this
     */
    public function setOnline($online)
    {
        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets read_only
     *
     * @return string
     */
    public function getReadOnly()
    {
        return $this->container['read_only'];
    }

    /**
     * Sets read_only
     *
     * @param string $read_only Boolean variable that indicates whether the Data Provider can be written to.
     *
     * @return $this
     */
    public function setReadOnly($read_only)
    {
        $this->container['read_only'] = $read_only;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the Data Provider.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_browsable
     *
     * @return string
     */
    public function getIsBrowsable()
    {
        return $this->container['is_browsable'];
    }

    /**
     * Sets is_browsable
     *
     * @param string $is_browsable is_browsable
     *
     * @return $this
     */
    public function setIsBrowsable($is_browsable)
    {
        $this->container['is_browsable'] = $is_browsable;

        return $this;
    }

    /**
     * Gets is_fast_syncing
     *
     * @return string
     */
    public function getIsFastSyncing()
    {
        return $this->container['is_fast_syncing'];
    }

    /**
     * Sets is_fast_syncing
     *
     * @param string $is_fast_syncing is_fast_syncing
     *
     * @return $this
     */
    public function setIsFastSyncing($is_fast_syncing)
    {
        $this->container['is_fast_syncing'] = $is_fast_syncing;

        return $this;
    }

    /**
     * Gets allow_file_owner_change
     *
     * @return string
     */
    public function getAllowFileOwnerChange()
    {
        return $this->container['allow_file_owner_change'];
    }

    /**
     * Sets allow_file_owner_change
     *
     * @param string $allow_file_owner_change allow_file_owner_change
     *
     * @return $this
     */
    public function setAllowFileOwnerChange($allow_file_owner_change)
    {
        $this->container['allow_file_owner_change'] = $allow_file_owner_change;

        return $this;
    }

    /**
     * Gets content_storage_shared_between_users
     *
     * @return string
     */
    public function getContentStorageSharedBetweenUsers()
    {
        return $this->container['content_storage_shared_between_users'];
    }

    /**
     * Sets content_storage_shared_between_users
     *
     * @param string $content_storage_shared_between_users content_storage_shared_between_users
     *
     * @return $this
     */
    public function setContentStorageSharedBetweenUsers($content_storage_shared_between_users)
    {
        $this->container['content_storage_shared_between_users'] = $content_storage_shared_between_users;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


