<?php
/**
 * Userfile
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CBRAIN API
 *
 * REST API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Userfile Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Userfile implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Userfile';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'name' => 'string',
        'size' => 'int',
        'user_id' => 'float',
        'parent_id' => 'float',
        'type' => 'string',
        'group_id' => 'float',
        'data_provider_id' => 'float',
        'group_writable' => 'string',
        'num_files' => 'float',
        'hidden' => 'string',
        'immutable' => 'string',
        'archived' => 'string',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int64',
        'name' => null,
        'size' => 'int64',
        'user_id' => 'int64',
        'parent_id' => 'int64',
        'type' => null,
        'group_id' => 'int64',
        'data_provider_id' => 'int64',
        'group_writable' => 'boolean',
        'num_files' => 'int64',
        'hidden' => 'boolean',
        'immutable' => 'boolean',
        'archived' => 'boolean',
        'description' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'size' => 'size',
        'user_id' => 'user_id',
        'parent_id' => 'parent_id',
        'type' => 'type',
        'group_id' => 'group_id',
        'data_provider_id' => 'data_provider_id',
        'group_writable' => 'group_writable',
        'num_files' => 'num_files',
        'hidden' => 'hidden',
        'immutable' => 'immutable',
        'archived' => 'archived',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'size' => 'setSize',
        'user_id' => 'setUserId',
        'parent_id' => 'setParentId',
        'type' => 'setType',
        'group_id' => 'setGroupId',
        'data_provider_id' => 'setDataProviderId',
        'group_writable' => 'setGroupWritable',
        'num_files' => 'setNumFiles',
        'hidden' => 'setHidden',
        'immutable' => 'setImmutable',
        'archived' => 'setArchived',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'size' => 'getSize',
        'user_id' => 'getUserId',
        'parent_id' => 'getParentId',
        'type' => 'getType',
        'group_id' => 'getGroupId',
        'data_provider_id' => 'getDataProviderId',
        'group_writable' => 'getGroupWritable',
        'num_files' => 'getNumFiles',
        'hidden' => 'getHidden',
        'immutable' => 'getImmutable',
        'archived' => 'getArchived',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['size'] = isset($data['size']) ? $data['size'] : null;
        $this->container['user_id'] = isset($data['user_id']) ? $data['user_id'] : null;
        $this->container['parent_id'] = isset($data['parent_id']) ? $data['parent_id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['group_id'] = isset($data['group_id']) ? $data['group_id'] : null;
        $this->container['data_provider_id'] = isset($data['data_provider_id']) ? $data['data_provider_id'] : null;
        $this->container['group_writable'] = isset($data['group_writable']) ? $data['group_writable'] : null;
        $this->container['num_files'] = isset($data['num_files']) ? $data['num_files'] : null;
        $this->container['hidden'] = isset($data['hidden']) ? $data['hidden'] : null;
        $this->container['immutable'] = isset($data['immutable']) ? $data['immutable'] : null;
        $this->container['archived'] = isset($data['archived']) ? $data['archived'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id ID number of the file.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the file that the Userfile represents
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets size
     *
     * @return int
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param int $size Number of bytes used to store the file.
     *
     * @return $this
     */
    public function setSize($size)
    {
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets user_id
     *
     * @return float
     */
    public function getUserId()
    {
        return $this->container['user_id'];
    }

    /**
     * Sets user_id
     *
     * @param float $user_id ID of the owner of the file.
     *
     * @return $this
     */
    public function setUserId($user_id)
    {
        $this->container['user_id'] = $user_id;

        return $this;
    }

    /**
     * Gets parent_id
     *
     * @return float
     */
    public function getParentId()
    {
        return $this->container['parent_id'];
    }

    /**
     * Sets parent_id
     *
     * @param float $parent_id ID of the parent Userfile, if any exists, or null otherwise.
     *
     * @return $this
     */
    public function setParentId($parent_id)
    {
        $this->container['parent_id'] = $parent_id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Type of the file. This is important in determining what tools can be run on the file. The most generic file types, are the Single File, which represents one file, and the File Collection, which represents a directory full of files.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets group_id
     *
     * @return float
     */
    public function getGroupId()
    {
        return $this->container['group_id'];
    }

    /**
     * Sets group_id
     *
     * @param float $group_id ID of the group that owns the file, which determines its visibility status.
     *
     * @return $this
     */
    public function setGroupId($group_id)
    {
        $this->container['group_id'] = $group_id;

        return $this;
    }

    /**
     * Gets data_provider_id
     *
     * @return float
     */
    public function getDataProviderId()
    {
        return $this->container['data_provider_id'];
    }

    /**
     * Sets data_provider_id
     *
     * @param float $data_provider_id ID of the Data Provider that is hosting the persistent copy of the file. It may exist in caches across the systems that make up CBRAIN, as copies of the file are made in order to run scientific programs on them on remote systems.
     *
     * @return $this
     */
    public function setDataProviderId($data_provider_id)
    {
        $this->container['data_provider_id'] = $data_provider_id;

        return $this;
    }

    /**
     * Gets group_writable
     *
     * @return string
     */
    public function getGroupWritable()
    {
        return $this->container['group_writable'];
    }

    /**
     * Sets group_writable
     *
     * @param string $group_writable Boolean variable that specifies whether members of the owner group have access to modify or overwrite the file.
     *
     * @return $this
     */
    public function setGroupWritable($group_writable)
    {
        $this->container['group_writable'] = $group_writable;

        return $this;
    }

    /**
     * Gets num_files
     *
     * @return float
     */
    public function getNumFiles()
    {
        return $this->container['num_files'];
    }

    /**
     * Sets num_files
     *
     * @param float $num_files Number of files that the Userfiles represents. For Single Files, this is always 1.
     *
     * @return $this
     */
    public function setNumFiles($num_files)
    {
        $this->container['num_files'] = $num_files;

        return $this;
    }

    /**
     * Gets hidden
     *
     * @return string
     */
    public function getHidden()
    {
        return $this->container['hidden'];
    }

    /**
     * Sets hidden
     *
     * @param string $hidden Boolean variable that specifies whether this file is hidden or not in the user interface.
     *
     * @return $this
     */
    public function setHidden($hidden)
    {
        $this->container['hidden'] = $hidden;

        return $this;
    }

    /**
     * Gets immutable
     *
     * @return string
     */
    public function getImmutable()
    {
        return $this->container['immutable'];
    }

    /**
     * Sets immutable
     *
     * @param string $immutable Boolean variable that specifies whether any user can modify the contents of the file.
     *
     * @return $this
     */
    public function setImmutable($immutable)
    {
        $this->container['immutable'] = $immutable;

        return $this;
    }

    /**
     * Gets archived
     *
     * @return string
     */
    public function getArchived()
    {
        return $this->container['archived'];
    }

    /**
     * Sets archived
     *
     * @param string $archived Boolean variable that specifies whether the file is available, uncompressed, or has been archived.
     *
     * @return $this
     */
    public function setArchived($archived)
    {
        $this->container['archived'] = $archived;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Description of the file.
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


