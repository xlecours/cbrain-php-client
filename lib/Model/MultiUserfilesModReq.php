<?php
/**
 * MultiUserfilesModReq
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CBRAIN API
 *
 * API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * MultiUserfilesModReq Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class MultiUserfilesModReq implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'MultiUserfilesModReq';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'file_ids' => 'string[]',
        'data_provider_id_for_mv_cp' => 'int',
        'specified_filename' => 'string',
        'operation' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'file_ids' => null,
        'data_provider_id_for_mv_cp' => null,
        'specified_filename' => null,
        'operation' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'file_ids' => 'file_ids',
        'data_provider_id_for_mv_cp' => 'data_provider_id_for_mv_cp',
        'specified_filename' => 'specified_filename',
        'operation' => 'operation'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'file_ids' => 'setFileIds',
        'data_provider_id_for_mv_cp' => 'setDataProviderIdForMvCp',
        'specified_filename' => 'setSpecifiedFilename',
        'operation' => 'setOperation'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'file_ids' => 'getFileIds',
        'data_provider_id_for_mv_cp' => 'getDataProviderIdForMvCp',
        'specified_filename' => 'getSpecifiedFilename',
        'operation' => 'getOperation'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['file_ids'] = isset($data['file_ids']) ? $data['file_ids'] : null;
        $this->container['data_provider_id_for_mv_cp'] = isset($data['data_provider_id_for_mv_cp']) ? $data['data_provider_id_for_mv_cp'] : null;
        $this->container['specified_filename'] = isset($data['specified_filename']) ? $data['specified_filename'] : null;
        $this->container['operation'] = isset($data['operation']) ? $data['operation'] : 'sync_local';
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets file_ids
     *
     * @return string[]
     */
    public function getFileIds()
    {
        return $this->container['file_ids'];
    }

    /**
     * Sets file_ids
     *
     * @param string[] $file_ids file_ids
     *
     * @return $this
     */
    public function setFileIds($file_ids)
    {
        $this->container['file_ids'] = $file_ids;

        return $this;
    }

    /**
     * Gets data_provider_id_for_mv_cp
     *
     * @return int
     */
    public function getDataProviderIdForMvCp()
    {
        return $this->container['data_provider_id_for_mv_cp'];
    }

    /**
     * Sets data_provider_id_for_mv_cp
     *
     * @param int $data_provider_id_for_mv_cp data_provider_id_for_mv_cp
     *
     * @return $this
     */
    public function setDataProviderIdForMvCp($data_provider_id_for_mv_cp)
    {
        $this->container['data_provider_id_for_mv_cp'] = $data_provider_id_for_mv_cp;

        return $this;
    }

    /**
     * Gets specified_filename
     *
     * @return string
     */
    public function getSpecifiedFilename()
    {
        return $this->container['specified_filename'];
    }

    /**
     * Sets specified_filename
     *
     * @param string $specified_filename The name of the archive file that the Userfiles will be compressed into when downloading.
     *
     * @return $this
     */
    public function setSpecifiedFilename($specified_filename)
    {
        $this->container['specified_filename'] = $specified_filename;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string $operation Used when affecting the synchronization status of files. Either \"sync_local\" or \"all_newer\". \"sync_local\" will ensure that the version of the file in the CBRAIN portal cache is the most recent version that exists on the Data Provider. \"all_newer\" will ensure that ALL caches known to CBRAIN are updated with the most recent version of the files in the host Data Provider.
     *
     * @return $this
     */
    public function setOperation($operation)
    {
        $this->container['operation'] = $operation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


