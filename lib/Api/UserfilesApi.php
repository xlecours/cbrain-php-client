<?php
/**
 * UserfilesApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CBRAIN API
 *
 * REST API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * UserfilesApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserfilesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation userfilesChangeProviderPost
     *
     * Moves the Userfiles from their current Data Provider to a new one.
     *
     * @param  int[] $file_ids The ID&#39;s of the Userfiles to be moved or copied to a new Data Provider. (required)
     * @param  int $data_provider_id_for_mv_cp The ID of the Data Provider to move or copy the files to. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  bool $crush_destination Specifies whether to overwrite files on the destination Data Provider if a file already exists there with the same name (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userfilesChangeProviderPost($file_ids, $data_provider_id_for_mv_cp, $authenticity_token, $crush_destination = 'false')
    {
        $this->userfilesChangeProviderPostWithHttpInfo($file_ids, $data_provider_id_for_mv_cp, $authenticity_token, $crush_destination);
    }

    /**
     * Operation userfilesChangeProviderPostWithHttpInfo
     *
     * Moves the Userfiles from their current Data Provider to a new one.
     *
     * @param  int[] $file_ids The ID&#39;s of the Userfiles to be moved or copied to a new Data Provider. (required)
     * @param  int $data_provider_id_for_mv_cp The ID of the Data Provider to move or copy the files to. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  bool $crush_destination Specifies whether to overwrite files on the destination Data Provider if a file already exists there with the same name (optional, default to false)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesChangeProviderPostWithHttpInfo($file_ids, $data_provider_id_for_mv_cp, $authenticity_token, $crush_destination = 'false')
    {
        $returnType = '';
        $request = $this->userfilesChangeProviderPostRequest($file_ids, $data_provider_id_for_mv_cp, $authenticity_token, $crush_destination);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesChangeProviderPostAsync
     *
     * Moves the Userfiles from their current Data Provider to a new one.
     *
     * @param  int[] $file_ids The ID&#39;s of the Userfiles to be moved or copied to a new Data Provider. (required)
     * @param  int $data_provider_id_for_mv_cp The ID of the Data Provider to move or copy the files to. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  bool $crush_destination Specifies whether to overwrite files on the destination Data Provider if a file already exists there with the same name (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesChangeProviderPostAsync($file_ids, $data_provider_id_for_mv_cp, $authenticity_token, $crush_destination = 'false')
    {
        return $this->userfilesChangeProviderPostAsyncWithHttpInfo($file_ids, $data_provider_id_for_mv_cp, $authenticity_token, $crush_destination)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesChangeProviderPostAsyncWithHttpInfo
     *
     * Moves the Userfiles from their current Data Provider to a new one.
     *
     * @param  int[] $file_ids The ID&#39;s of the Userfiles to be moved or copied to a new Data Provider. (required)
     * @param  int $data_provider_id_for_mv_cp The ID of the Data Provider to move or copy the files to. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  bool $crush_destination Specifies whether to overwrite files on the destination Data Provider if a file already exists there with the same name (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesChangeProviderPostAsyncWithHttpInfo($file_ids, $data_provider_id_for_mv_cp, $authenticity_token, $crush_destination = 'false')
    {
        $returnType = '';
        $request = $this->userfilesChangeProviderPostRequest($file_ids, $data_provider_id_for_mv_cp, $authenticity_token, $crush_destination);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesChangeProviderPost'
     *
     * @param  int[] $file_ids The ID&#39;s of the Userfiles to be moved or copied to a new Data Provider. (required)
     * @param  int $data_provider_id_for_mv_cp The ID of the Data Provider to move or copy the files to. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  bool $crush_destination Specifies whether to overwrite files on the destination Data Provider if a file already exists there with the same name (optional, default to false)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesChangeProviderPostRequest($file_ids, $data_provider_id_for_mv_cp, $authenticity_token, $crush_destination = 'false')
    {
        // verify the required parameter 'file_ids' is set
        if ($file_ids === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_ids when calling userfilesChangeProviderPost'
            );
        }
        // verify the required parameter 'data_provider_id_for_mv_cp' is set
        if ($data_provider_id_for_mv_cp === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_provider_id_for_mv_cp when calling userfilesChangeProviderPost'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling userfilesChangeProviderPost'
            );
        }

        $resourcePath = '/userfiles/change_provider';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($file_ids !== null) {
            $formParams['file_ids[]'] = ObjectSerializer::toFormValue($file_ids);
        }
        // form params
        if ($data_provider_id_for_mv_cp !== null) {
            $formParams['data_provider_id_for_mv_cp'] = ObjectSerializer::toFormValue($data_provider_id_for_mv_cp);
        }
        // form params
        if ($crush_destination !== null) {
            $formParams['crush_destination'] = ObjectSerializer::toFormValue($crush_destination);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesCompressPost
     *
     * Compresses many Userfiles each into their own GZIP archive.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to compress. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userfilesCompressPost($file_ids, $authenticity_token)
    {
        $this->userfilesCompressPostWithHttpInfo($file_ids, $authenticity_token);
    }

    /**
     * Operation userfilesCompressPostWithHttpInfo
     *
     * Compresses many Userfiles each into their own GZIP archive.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to compress. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesCompressPostWithHttpInfo($file_ids, $authenticity_token)
    {
        $returnType = '';
        $request = $this->userfilesCompressPostRequest($file_ids, $authenticity_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesCompressPostAsync
     *
     * Compresses many Userfiles each into their own GZIP archive.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to compress. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesCompressPostAsync($file_ids, $authenticity_token)
    {
        return $this->userfilesCompressPostAsyncWithHttpInfo($file_ids, $authenticity_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesCompressPostAsyncWithHttpInfo
     *
     * Compresses many Userfiles each into their own GZIP archive.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to compress. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesCompressPostAsyncWithHttpInfo($file_ids, $authenticity_token)
    {
        $returnType = '';
        $request = $this->userfilesCompressPostRequest($file_ids, $authenticity_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesCompressPost'
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to compress. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesCompressPostRequest($file_ids, $authenticity_token)
    {
        // verify the required parameter 'file_ids' is set
        if ($file_ids === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_ids when calling userfilesCompressPost'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling userfilesCompressPost'
            );
        }

        $resourcePath = '/userfiles/compress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($file_ids !== null) {
            $formParams['file_ids[]'] = ObjectSerializer::toFormValue($file_ids);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesDeleteFilesPost
     *
     * Delete several files that have been registered as Userfiles
     *
     * @param  int[] $file_ids The ID numbers of the files to be deleted (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userfilesDeleteFilesPost($file_ids, $authenticity_token)
    {
        $this->userfilesDeleteFilesPostWithHttpInfo($file_ids, $authenticity_token);
    }

    /**
     * Operation userfilesDeleteFilesPostWithHttpInfo
     *
     * Delete several files that have been registered as Userfiles
     *
     * @param  int[] $file_ids The ID numbers of the files to be deleted (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesDeleteFilesPostWithHttpInfo($file_ids, $authenticity_token)
    {
        $returnType = '';
        $request = $this->userfilesDeleteFilesPostRequest($file_ids, $authenticity_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesDeleteFilesPostAsync
     *
     * Delete several files that have been registered as Userfiles
     *
     * @param  int[] $file_ids The ID numbers of the files to be deleted (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesDeleteFilesPostAsync($file_ids, $authenticity_token)
    {
        return $this->userfilesDeleteFilesPostAsyncWithHttpInfo($file_ids, $authenticity_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesDeleteFilesPostAsyncWithHttpInfo
     *
     * Delete several files that have been registered as Userfiles
     *
     * @param  int[] $file_ids The ID numbers of the files to be deleted (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesDeleteFilesPostAsyncWithHttpInfo($file_ids, $authenticity_token)
    {
        $returnType = '';
        $request = $this->userfilesDeleteFilesPostRequest($file_ids, $authenticity_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesDeleteFilesPost'
     *
     * @param  int[] $file_ids The ID numbers of the files to be deleted (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesDeleteFilesPostRequest($file_ids, $authenticity_token)
    {
        // verify the required parameter 'file_ids' is set
        if ($file_ids === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_ids when calling userfilesDeleteFilesPost'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling userfilesDeleteFilesPost'
            );
        }

        $resourcePath = '/userfiles/delete_files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($file_ids !== null) {
            $formParams['file_ids[]'] = ObjectSerializer::toFormValue($file_ids);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesDownloadPost
     *
     * Download several files
     *
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  int[] $file_ids The ID numbers of the files to be downloaded. If more than one file is specified, they will be zipped into a gzip archive. (optional)
     * @param  string $specified_filename The name of the archive file that the Userfiles will be compressed into for downloading. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userfilesDownloadPost($authenticity_token, $file_ids = null, $specified_filename = null)
    {
        $this->userfilesDownloadPostWithHttpInfo($authenticity_token, $file_ids, $specified_filename);
    }

    /**
     * Operation userfilesDownloadPostWithHttpInfo
     *
     * Download several files
     *
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  int[] $file_ids The ID numbers of the files to be downloaded. If more than one file is specified, they will be zipped into a gzip archive. (optional)
     * @param  string $specified_filename The name of the archive file that the Userfiles will be compressed into for downloading. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesDownloadPostWithHttpInfo($authenticity_token, $file_ids = null, $specified_filename = null)
    {
        $returnType = '';
        $request = $this->userfilesDownloadPostRequest($authenticity_token, $file_ids, $specified_filename);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesDownloadPostAsync
     *
     * Download several files
     *
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  int[] $file_ids The ID numbers of the files to be downloaded. If more than one file is specified, they will be zipped into a gzip archive. (optional)
     * @param  string $specified_filename The name of the archive file that the Userfiles will be compressed into for downloading. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesDownloadPostAsync($authenticity_token, $file_ids = null, $specified_filename = null)
    {
        return $this->userfilesDownloadPostAsyncWithHttpInfo($authenticity_token, $file_ids, $specified_filename)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesDownloadPostAsyncWithHttpInfo
     *
     * Download several files
     *
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  int[] $file_ids The ID numbers of the files to be downloaded. If more than one file is specified, they will be zipped into a gzip archive. (optional)
     * @param  string $specified_filename The name of the archive file that the Userfiles will be compressed into for downloading. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesDownloadPostAsyncWithHttpInfo($authenticity_token, $file_ids = null, $specified_filename = null)
    {
        $returnType = '';
        $request = $this->userfilesDownloadPostRequest($authenticity_token, $file_ids, $specified_filename);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesDownloadPost'
     *
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  int[] $file_ids The ID numbers of the files to be downloaded. If more than one file is specified, they will be zipped into a gzip archive. (optional)
     * @param  string $specified_filename The name of the archive file that the Userfiles will be compressed into for downloading. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesDownloadPostRequest($authenticity_token, $file_ids = null, $specified_filename = null)
    {
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling userfilesDownloadPost'
            );
        }

        $resourcePath = '/userfiles/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($file_ids !== null) {
            $formParams['file_ids[]'] = ObjectSerializer::toFormValue($file_ids);
        }
        // form params
        if ($specified_filename !== null) {
            $formParams['specified_filename'] = ObjectSerializer::toFormValue($specified_filename);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesGet
     *
     * List of the Userfiles accessible to the current user.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Userfile[]
     */
    public function userfilesGet()
    {
        list($response) = $this->userfilesGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation userfilesGetWithHttpInfo
     *
     * List of the Userfiles accessible to the current user.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Userfile[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesGetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\Userfile[]';
        $request = $this->userfilesGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Userfile[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesGetAsync
     *
     * List of the Userfiles accessible to the current user.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesGetAsync()
    {
        return $this->userfilesGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesGetAsyncWithHttpInfo
     *
     * List of the Userfiles accessible to the current user.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesGetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\Userfile[]';
        $request = $this->userfilesGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesGetRequest()
    {

        $resourcePath = '/userfiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesIdContentGet
     *
     * Get the content of a Userfile
     *
     * @param  int $id The ID number of the Userfile to download (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userfilesIdContentGet($id)
    {
        $this->userfilesIdContentGetWithHttpInfo($id);
    }

    /**
     * Operation userfilesIdContentGetWithHttpInfo
     *
     * Get the content of a Userfile
     *
     * @param  int $id The ID number of the Userfile to download (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesIdContentGetWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->userfilesIdContentGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesIdContentGetAsync
     *
     * Get the content of a Userfile
     *
     * @param  int $id The ID number of the Userfile to download (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesIdContentGetAsync($id)
    {
        return $this->userfilesIdContentGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesIdContentGetAsyncWithHttpInfo
     *
     * Get the content of a Userfile
     *
     * @param  int $id The ID number of the Userfile to download (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesIdContentGetAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->userfilesIdContentGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesIdContentGet'
     *
     * @param  int $id The ID number of the Userfile to download (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesIdContentGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userfilesIdContentGet'
            );
        }

        $resourcePath = '/userfiles/{id}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesIdDelete
     *
     * Delete a Userfile.
     *
     * @param  int $id The ID number of the Userfile to delete. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userfilesIdDelete($id, $authenticity_token)
    {
        $this->userfilesIdDeleteWithHttpInfo($id, $authenticity_token);
    }

    /**
     * Operation userfilesIdDeleteWithHttpInfo
     *
     * Delete a Userfile.
     *
     * @param  int $id The ID number of the Userfile to delete. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesIdDeleteWithHttpInfo($id, $authenticity_token)
    {
        $returnType = '';
        $request = $this->userfilesIdDeleteRequest($id, $authenticity_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesIdDeleteAsync
     *
     * Delete a Userfile.
     *
     * @param  int $id The ID number of the Userfile to delete. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesIdDeleteAsync($id, $authenticity_token)
    {
        return $this->userfilesIdDeleteAsyncWithHttpInfo($id, $authenticity_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesIdDeleteAsyncWithHttpInfo
     *
     * Delete a Userfile.
     *
     * @param  int $id The ID number of the Userfile to delete. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesIdDeleteAsyncWithHttpInfo($id, $authenticity_token)
    {
        $returnType = '';
        $request = $this->userfilesIdDeleteRequest($id, $authenticity_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesIdDelete'
     *
     * @param  int $id The ID number of the Userfile to delete. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesIdDeleteRequest($id, $authenticity_token)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userfilesIdDelete'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling userfilesIdDelete'
            );
        }

        $resourcePath = '/userfiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesIdGet
     *
     * Get information on a Userfile.
     *
     * @param  int $id The ID number of the Userfile to get information on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Userfile
     */
    public function userfilesIdGet($id)
    {
        list($response) = $this->userfilesIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation userfilesIdGetWithHttpInfo
     *
     * Get information on a Userfile.
     *
     * @param  int $id The ID number of the Userfile to get information on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Userfile, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesIdGetWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Userfile';
        $request = $this->userfilesIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Userfile',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesIdGetAsync
     *
     * Get information on a Userfile.
     *
     * @param  int $id The ID number of the Userfile to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesIdGetAsync($id)
    {
        return $this->userfilesIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesIdGetAsyncWithHttpInfo
     *
     * Get information on a Userfile.
     *
     * @param  int $id The ID number of the Userfile to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Userfile';
        $request = $this->userfilesIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesIdGet'
     *
     * @param  int $id The ID number of the Userfile to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userfilesIdGet'
            );
        }

        $resourcePath = '/userfiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesIdPut
     *
     * Update information on a Userfile.
     *
     * @param  int $id The ID number of the Userfile to update. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $userfile_type Type of file that the Userfile is registered in CBRAIN as. This parameter affects what kinds of Tools can be used on the file. (optional, default to SingleFile)
     * @param  int $userfile_user_id ID of the user who owns the file. (optional, default to 1)
     * @param  int $userfile_group_id ID of the group that will have access to the Userfile. (optional, default to 1)
     * @param  int[] $tag_ids ID numbers of the tags that describe the Userfile. (optional)
     * @param  bool $userfile_group_writable Specifies whether other members of the group that owns the file can modify the Userfile. (optional)
     * @param  bool $userfile_hidden Specifies whether the Userfile is hidden or visible in the normal file listing. (optional, default to false)
     * @param  bool $userfile_immutable Specifies whether the Userfile can be modified. (optional, default to false)
     * @param  string $userfile_description Description of the Userfile. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userfilesIdPut($id, $authenticity_token, $userfile_type = 'SingleFile', $userfile_user_id = '1', $userfile_group_id = '1', $tag_ids = null, $userfile_group_writable = null, $userfile_hidden = 'false', $userfile_immutable = 'false', $userfile_description = null)
    {
        $this->userfilesIdPutWithHttpInfo($id, $authenticity_token, $userfile_type, $userfile_user_id, $userfile_group_id, $tag_ids, $userfile_group_writable, $userfile_hidden, $userfile_immutable, $userfile_description);
    }

    /**
     * Operation userfilesIdPutWithHttpInfo
     *
     * Update information on a Userfile.
     *
     * @param  int $id The ID number of the Userfile to update. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $userfile_type Type of file that the Userfile is registered in CBRAIN as. This parameter affects what kinds of Tools can be used on the file. (optional, default to SingleFile)
     * @param  int $userfile_user_id ID of the user who owns the file. (optional, default to 1)
     * @param  int $userfile_group_id ID of the group that will have access to the Userfile. (optional, default to 1)
     * @param  int[] $tag_ids ID numbers of the tags that describe the Userfile. (optional)
     * @param  bool $userfile_group_writable Specifies whether other members of the group that owns the file can modify the Userfile. (optional)
     * @param  bool $userfile_hidden Specifies whether the Userfile is hidden or visible in the normal file listing. (optional, default to false)
     * @param  bool $userfile_immutable Specifies whether the Userfile can be modified. (optional, default to false)
     * @param  string $userfile_description Description of the Userfile. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesIdPutWithHttpInfo($id, $authenticity_token, $userfile_type = 'SingleFile', $userfile_user_id = '1', $userfile_group_id = '1', $tag_ids = null, $userfile_group_writable = null, $userfile_hidden = 'false', $userfile_immutable = 'false', $userfile_description = null)
    {
        $returnType = '';
        $request = $this->userfilesIdPutRequest($id, $authenticity_token, $userfile_type, $userfile_user_id, $userfile_group_id, $tag_ids, $userfile_group_writable, $userfile_hidden, $userfile_immutable, $userfile_description);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesIdPutAsync
     *
     * Update information on a Userfile.
     *
     * @param  int $id The ID number of the Userfile to update. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $userfile_type Type of file that the Userfile is registered in CBRAIN as. This parameter affects what kinds of Tools can be used on the file. (optional, default to SingleFile)
     * @param  int $userfile_user_id ID of the user who owns the file. (optional, default to 1)
     * @param  int $userfile_group_id ID of the group that will have access to the Userfile. (optional, default to 1)
     * @param  int[] $tag_ids ID numbers of the tags that describe the Userfile. (optional)
     * @param  bool $userfile_group_writable Specifies whether other members of the group that owns the file can modify the Userfile. (optional)
     * @param  bool $userfile_hidden Specifies whether the Userfile is hidden or visible in the normal file listing. (optional, default to false)
     * @param  bool $userfile_immutable Specifies whether the Userfile can be modified. (optional, default to false)
     * @param  string $userfile_description Description of the Userfile. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesIdPutAsync($id, $authenticity_token, $userfile_type = 'SingleFile', $userfile_user_id = '1', $userfile_group_id = '1', $tag_ids = null, $userfile_group_writable = null, $userfile_hidden = 'false', $userfile_immutable = 'false', $userfile_description = null)
    {
        return $this->userfilesIdPutAsyncWithHttpInfo($id, $authenticity_token, $userfile_type, $userfile_user_id, $userfile_group_id, $tag_ids, $userfile_group_writable, $userfile_hidden, $userfile_immutable, $userfile_description)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesIdPutAsyncWithHttpInfo
     *
     * Update information on a Userfile.
     *
     * @param  int $id The ID number of the Userfile to update. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $userfile_type Type of file that the Userfile is registered in CBRAIN as. This parameter affects what kinds of Tools can be used on the file. (optional, default to SingleFile)
     * @param  int $userfile_user_id ID of the user who owns the file. (optional, default to 1)
     * @param  int $userfile_group_id ID of the group that will have access to the Userfile. (optional, default to 1)
     * @param  int[] $tag_ids ID numbers of the tags that describe the Userfile. (optional)
     * @param  bool $userfile_group_writable Specifies whether other members of the group that owns the file can modify the Userfile. (optional)
     * @param  bool $userfile_hidden Specifies whether the Userfile is hidden or visible in the normal file listing. (optional, default to false)
     * @param  bool $userfile_immutable Specifies whether the Userfile can be modified. (optional, default to false)
     * @param  string $userfile_description Description of the Userfile. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesIdPutAsyncWithHttpInfo($id, $authenticity_token, $userfile_type = 'SingleFile', $userfile_user_id = '1', $userfile_group_id = '1', $tag_ids = null, $userfile_group_writable = null, $userfile_hidden = 'false', $userfile_immutable = 'false', $userfile_description = null)
    {
        $returnType = '';
        $request = $this->userfilesIdPutRequest($id, $authenticity_token, $userfile_type, $userfile_user_id, $userfile_group_id, $tag_ids, $userfile_group_writable, $userfile_hidden, $userfile_immutable, $userfile_description);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesIdPut'
     *
     * @param  int $id The ID number of the Userfile to update. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $userfile_type Type of file that the Userfile is registered in CBRAIN as. This parameter affects what kinds of Tools can be used on the file. (optional, default to SingleFile)
     * @param  int $userfile_user_id ID of the user who owns the file. (optional, default to 1)
     * @param  int $userfile_group_id ID of the group that will have access to the Userfile. (optional, default to 1)
     * @param  int[] $tag_ids ID numbers of the tags that describe the Userfile. (optional)
     * @param  bool $userfile_group_writable Specifies whether other members of the group that owns the file can modify the Userfile. (optional)
     * @param  bool $userfile_hidden Specifies whether the Userfile is hidden or visible in the normal file listing. (optional, default to false)
     * @param  bool $userfile_immutable Specifies whether the Userfile can be modified. (optional, default to false)
     * @param  string $userfile_description Description of the Userfile. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesIdPutRequest($id, $authenticity_token, $userfile_type = 'SingleFile', $userfile_user_id = '1', $userfile_group_id = '1', $tag_ids = null, $userfile_group_writable = null, $userfile_hidden = 'false', $userfile_immutable = 'false', $userfile_description = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userfilesIdPut'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling userfilesIdPut'
            );
        }

        $resourcePath = '/userfiles/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($userfile_type !== null) {
            $formParams['userfile[type]'] = ObjectSerializer::toFormValue($userfile_type);
        }
        // form params
        if ($userfile_user_id !== null) {
            $formParams['userfile[user_id]'] = ObjectSerializer::toFormValue($userfile_user_id);
        }
        // form params
        if ($userfile_group_id !== null) {
            $formParams['userfile[group_id]'] = ObjectSerializer::toFormValue($userfile_group_id);
        }
        // form params
        if ($tag_ids !== null) {
            $formParams['tag_ids[]'] = ObjectSerializer::toFormValue($tag_ids);
        }
        // form params
        if ($userfile_group_writable !== null) {
            $formParams['userfile[group_writable]'] = ObjectSerializer::toFormValue($userfile_group_writable);
        }
        // form params
        if ($userfile_hidden !== null) {
            $formParams['userfile[hidden]'] = ObjectSerializer::toFormValue($userfile_hidden);
        }
        // form params
        if ($userfile_immutable !== null) {
            $formParams['userfile[immutable]'] = ObjectSerializer::toFormValue($userfile_immutable);
        }
        // form params
        if ($userfile_description !== null) {
            $formParams['userfile[description]'] = ObjectSerializer::toFormValue($userfile_description);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesPost
     *
     * Creates a new Userfile.
     *
     * @param  \SplFileObject $upload_file File to upload to CBRAIN (required)
     * @param  int $data_provider_id The ID of the Data Provider to upload the file to. (required)
     * @param  int $userfile_group_id ID of the group that will have access to the Userfile (required)
     * @param  string $file_type The type of the file (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $archive Archive (optional)
     * @param  string $_up_ex_mode usually \&quot;collection\&quot; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userfilesPost($upload_file, $data_provider_id, $userfile_group_id, $file_type, $authenticity_token, $archive = null, $_up_ex_mode = null)
    {
        $this->userfilesPostWithHttpInfo($upload_file, $data_provider_id, $userfile_group_id, $file_type, $authenticity_token, $archive, $_up_ex_mode);
    }

    /**
     * Operation userfilesPostWithHttpInfo
     *
     * Creates a new Userfile.
     *
     * @param  \SplFileObject $upload_file File to upload to CBRAIN (required)
     * @param  int $data_provider_id The ID of the Data Provider to upload the file to. (required)
     * @param  int $userfile_group_id ID of the group that will have access to the Userfile (required)
     * @param  string $file_type The type of the file (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $archive Archive (optional)
     * @param  string $_up_ex_mode usually \&quot;collection\&quot; (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesPostWithHttpInfo($upload_file, $data_provider_id, $userfile_group_id, $file_type, $authenticity_token, $archive = null, $_up_ex_mode = null)
    {
        $returnType = '';
        $request = $this->userfilesPostRequest($upload_file, $data_provider_id, $userfile_group_id, $file_type, $authenticity_token, $archive, $_up_ex_mode);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesPostAsync
     *
     * Creates a new Userfile.
     *
     * @param  \SplFileObject $upload_file File to upload to CBRAIN (required)
     * @param  int $data_provider_id The ID of the Data Provider to upload the file to. (required)
     * @param  int $userfile_group_id ID of the group that will have access to the Userfile (required)
     * @param  string $file_type The type of the file (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $archive Archive (optional)
     * @param  string $_up_ex_mode usually \&quot;collection\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesPostAsync($upload_file, $data_provider_id, $userfile_group_id, $file_type, $authenticity_token, $archive = null, $_up_ex_mode = null)
    {
        return $this->userfilesPostAsyncWithHttpInfo($upload_file, $data_provider_id, $userfile_group_id, $file_type, $authenticity_token, $archive, $_up_ex_mode)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesPostAsyncWithHttpInfo
     *
     * Creates a new Userfile.
     *
     * @param  \SplFileObject $upload_file File to upload to CBRAIN (required)
     * @param  int $data_provider_id The ID of the Data Provider to upload the file to. (required)
     * @param  int $userfile_group_id ID of the group that will have access to the Userfile (required)
     * @param  string $file_type The type of the file (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $archive Archive (optional)
     * @param  string $_up_ex_mode usually \&quot;collection\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesPostAsyncWithHttpInfo($upload_file, $data_provider_id, $userfile_group_id, $file_type, $authenticity_token, $archive = null, $_up_ex_mode = null)
    {
        $returnType = '';
        $request = $this->userfilesPostRequest($upload_file, $data_provider_id, $userfile_group_id, $file_type, $authenticity_token, $archive, $_up_ex_mode);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesPost'
     *
     * @param  \SplFileObject $upload_file File to upload to CBRAIN (required)
     * @param  int $data_provider_id The ID of the Data Provider to upload the file to. (required)
     * @param  int $userfile_group_id ID of the group that will have access to the Userfile (required)
     * @param  string $file_type The type of the file (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $archive Archive (optional)
     * @param  string $_up_ex_mode usually \&quot;collection\&quot; (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesPostRequest($upload_file, $data_provider_id, $userfile_group_id, $file_type, $authenticity_token, $archive = null, $_up_ex_mode = null)
    {
        // verify the required parameter 'upload_file' is set
        if ($upload_file === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $upload_file when calling userfilesPost'
            );
        }
        // verify the required parameter 'data_provider_id' is set
        if ($data_provider_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_provider_id when calling userfilesPost'
            );
        }
        // verify the required parameter 'userfile_group_id' is set
        if ($userfile_group_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $userfile_group_id when calling userfilesPost'
            );
        }
        // verify the required parameter 'file_type' is set
        if ($file_type === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_type when calling userfilesPost'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling userfilesPost'
            );
        }

        $resourcePath = '/userfiles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($upload_file !== null) {
            $multipart = true;
            $formParams['upload_file'] = \GuzzleHttp\Psr7\try_fopen(ObjectSerializer::toFormValue($upload_file), 'rb');
        }
        // form params
        if ($data_provider_id !== null) {
            $formParams['data_provider_id'] = ObjectSerializer::toFormValue($data_provider_id);
        }
        // form params
        if ($userfile_group_id !== null) {
            $formParams['userfile[group_id]'] = ObjectSerializer::toFormValue($userfile_group_id);
        }
        // form params
        if ($file_type !== null) {
            $formParams['file_type'] = ObjectSerializer::toFormValue($file_type);
        }
        // form params
        if ($archive !== null) {
            $formParams['archive'] = ObjectSerializer::toFormValue($archive);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // form params
        if ($_up_ex_mode !== null) {
            $formParams['_up_ex_mode'] = ObjectSerializer::toFormValue($_up_ex_mode);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesSyncMultiplePost
     *
     * Syncs Userfiles to their Data Providers' cache.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to synchronize. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $operation Either \&quot;sync_local\&quot; or \&quot;all_newer\&quot;. \&quot;sync_local\&quot; will ensure that the version of the file in the CBRAIN portal cache is the most recent version that exists on the Data Provider. \&quot;all_newer\&quot; will ensure that ALL caches known to CBRAIN are updated with the most recent version of the files in the host Data Provider. (optional, default to sync_local)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userfilesSyncMultiplePost($file_ids, $authenticity_token, $operation = 'sync_local')
    {
        $this->userfilesSyncMultiplePostWithHttpInfo($file_ids, $authenticity_token, $operation);
    }

    /**
     * Operation userfilesSyncMultiplePostWithHttpInfo
     *
     * Syncs Userfiles to their Data Providers' cache.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to synchronize. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $operation Either \&quot;sync_local\&quot; or \&quot;all_newer\&quot;. \&quot;sync_local\&quot; will ensure that the version of the file in the CBRAIN portal cache is the most recent version that exists on the Data Provider. \&quot;all_newer\&quot; will ensure that ALL caches known to CBRAIN are updated with the most recent version of the files in the host Data Provider. (optional, default to sync_local)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesSyncMultiplePostWithHttpInfo($file_ids, $authenticity_token, $operation = 'sync_local')
    {
        $returnType = '';
        $request = $this->userfilesSyncMultiplePostRequest($file_ids, $authenticity_token, $operation);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesSyncMultiplePostAsync
     *
     * Syncs Userfiles to their Data Providers' cache.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to synchronize. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $operation Either \&quot;sync_local\&quot; or \&quot;all_newer\&quot;. \&quot;sync_local\&quot; will ensure that the version of the file in the CBRAIN portal cache is the most recent version that exists on the Data Provider. \&quot;all_newer\&quot; will ensure that ALL caches known to CBRAIN are updated with the most recent version of the files in the host Data Provider. (optional, default to sync_local)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesSyncMultiplePostAsync($file_ids, $authenticity_token, $operation = 'sync_local')
    {
        return $this->userfilesSyncMultiplePostAsyncWithHttpInfo($file_ids, $authenticity_token, $operation)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesSyncMultiplePostAsyncWithHttpInfo
     *
     * Syncs Userfiles to their Data Providers' cache.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to synchronize. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $operation Either \&quot;sync_local\&quot; or \&quot;all_newer\&quot;. \&quot;sync_local\&quot; will ensure that the version of the file in the CBRAIN portal cache is the most recent version that exists on the Data Provider. \&quot;all_newer\&quot; will ensure that ALL caches known to CBRAIN are updated with the most recent version of the files in the host Data Provider. (optional, default to sync_local)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesSyncMultiplePostAsyncWithHttpInfo($file_ids, $authenticity_token, $operation = 'sync_local')
    {
        $returnType = '';
        $request = $this->userfilesSyncMultiplePostRequest($file_ids, $authenticity_token, $operation);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesSyncMultiplePost'
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to synchronize. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  string $operation Either \&quot;sync_local\&quot; or \&quot;all_newer\&quot;. \&quot;sync_local\&quot; will ensure that the version of the file in the CBRAIN portal cache is the most recent version that exists on the Data Provider. \&quot;all_newer\&quot; will ensure that ALL caches known to CBRAIN are updated with the most recent version of the files in the host Data Provider. (optional, default to sync_local)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesSyncMultiplePostRequest($file_ids, $authenticity_token, $operation = 'sync_local')
    {
        // verify the required parameter 'file_ids' is set
        if ($file_ids === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_ids when calling userfilesSyncMultiplePost'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling userfilesSyncMultiplePost'
            );
        }

        $resourcePath = '/userfiles/sync_multiple';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($file_ids !== null) {
            $formParams['file_ids[]'] = ObjectSerializer::toFormValue($file_ids);
        }
        // form params
        if ($operation !== null) {
            $formParams['operation'] = ObjectSerializer::toFormValue($operation);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userfilesUncompressPost
     *
     * Uncompresses many Userfiles.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to uncompress. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function userfilesUncompressPost($file_ids, $authenticity_token)
    {
        $this->userfilesUncompressPostWithHttpInfo($file_ids, $authenticity_token);
    }

    /**
     * Operation userfilesUncompressPostWithHttpInfo
     *
     * Uncompresses many Userfiles.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to uncompress. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function userfilesUncompressPostWithHttpInfo($file_ids, $authenticity_token)
    {
        $returnType = '';
        $request = $this->userfilesUncompressPostRequest($file_ids, $authenticity_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation userfilesUncompressPostAsync
     *
     * Uncompresses many Userfiles.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to uncompress. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesUncompressPostAsync($file_ids, $authenticity_token)
    {
        return $this->userfilesUncompressPostAsyncWithHttpInfo($file_ids, $authenticity_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userfilesUncompressPostAsyncWithHttpInfo
     *
     * Uncompresses many Userfiles.
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to uncompress. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userfilesUncompressPostAsyncWithHttpInfo($file_ids, $authenticity_token)
    {
        $returnType = '';
        $request = $this->userfilesUncompressPostRequest($file_ids, $authenticity_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userfilesUncompressPost'
     *
     * @param  int[] $file_ids A list of Userfile ID numbers to uncompress. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userfilesUncompressPostRequest($file_ids, $authenticity_token)
    {
        // verify the required parameter 'file_ids' is set
        if ($file_ids === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_ids when calling userfilesUncompressPost'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling userfilesUncompressPost'
            );
        }

        $resourcePath = '/userfiles/uncompress';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($file_ids !== null) {
            $formParams['file_ids[]'] = ObjectSerializer::toFormValue($file_ids);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
