<?php
/**
 * GroupsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * CBRAIN API
 *
 * REST API for interacting with the CBRAIN Platform
 *
 * OpenAPI spec version: 5.0.2
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * GroupsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class GroupsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation groupsGet
     *
     * Get a list of the Groups (projects) available to the current user.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Group[]
     */
    public function groupsGet()
    {
        list($response) = $this->groupsGetWithHttpInfo();
        return $response;
    }

    /**
     * Operation groupsGetWithHttpInfo
     *
     * Get a list of the Groups (projects) available to the current user.
     *
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Group[], HTTP status code, HTTP response headers (array of strings)
     */
    public function groupsGetWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\Group[]';
        $request = $this->groupsGetRequest();

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Group[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupsGetAsync
     *
     * Get a list of the Groups (projects) available to the current user.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsGetAsync()
    {
        return $this->groupsGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupsGetAsyncWithHttpInfo
     *
     * Get a list of the Groups (projects) available to the current user.
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsGetAsyncWithHttpInfo()
    {
        $returnType = '\Swagger\Client\Model\Group[]';
        $request = $this->groupsGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupsGet'
     *
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupsGetRequest()
    {

        $resourcePath = '/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupsIdDelete
     *
     * Deletes a Group (project).
     *
     * @param  int $id ID of the Group to delete. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function groupsIdDelete($id, $authenticity_token)
    {
        $this->groupsIdDeleteWithHttpInfo($id, $authenticity_token);
    }

    /**
     * Operation groupsIdDeleteWithHttpInfo
     *
     * Deletes a Group (project).
     *
     * @param  int $id ID of the Group to delete. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupsIdDeleteWithHttpInfo($id, $authenticity_token)
    {
        $returnType = '';
        $request = $this->groupsIdDeleteRequest($id, $authenticity_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation groupsIdDeleteAsync
     *
     * Deletes a Group (project).
     *
     * @param  int $id ID of the Group to delete. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsIdDeleteAsync($id, $authenticity_token)
    {
        return $this->groupsIdDeleteAsyncWithHttpInfo($id, $authenticity_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupsIdDeleteAsyncWithHttpInfo
     *
     * Deletes a Group (project).
     *
     * @param  int $id ID of the Group to delete. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsIdDeleteAsyncWithHttpInfo($id, $authenticity_token)
    {
        $returnType = '';
        $request = $this->groupsIdDeleteRequest($id, $authenticity_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupsIdDelete'
     *
     * @param  int $id ID of the Group to delete. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupsIdDeleteRequest($id, $authenticity_token)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling groupsIdDelete'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling groupsIdDelete'
            );
        }

        $resourcePath = '/groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupsIdGet
     *
     * Get information on a Group (project).
     *
     * @param  int $id ID of the Group to get information on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\Group
     */
    public function groupsIdGet($id)
    {
        list($response) = $this->groupsIdGetWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation groupsIdGetWithHttpInfo
     *
     * Get information on a Group (project).
     *
     * @param  int $id ID of the Group to get information on. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\Group, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupsIdGetWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Group';
        $request = $this->groupsIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\Group',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation groupsIdGetAsync
     *
     * Get information on a Group (project).
     *
     * @param  int $id ID of the Group to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsIdGetAsync($id)
    {
        return $this->groupsIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupsIdGetAsyncWithHttpInfo
     *
     * Get information on a Group (project).
     *
     * @param  int $id ID of the Group to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\Group';
        $request = $this->groupsIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupsIdGet'
     *
     * @param  int $id ID of the Group to get information on. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling groupsIdGet'
            );
        }

        $resourcePath = '/groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded', 'multipart/form-data']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupsIdPut
     *
     * Update the properties of a Group (project).
     *
     * @param  int $id ID of the Group to be updated. (required)
     * @param  string $group_name The new name of the Group. (optional, default to NewGroupName)
     * @param  string $group_description The description of the new Group. (optional, default to This project will group all of the files for a large neuroscience study to figure out how the brain works once and for all.)
     * @param  int $group_site_id The ID of the site associated with the Group. (optional)
     * @param  bool $group_invisible Specifies whether to make the group invisible or not. Invisible groups exist solely to control access to resources. (optional, default to false)
     * @param  int[] $group_user_ids An array of IDs of Users that will be members of the new Group. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function groupsIdPut($id, $group_name = 'NewGroupName', $group_description = 'This project will group all of the files for a large neuroscience study to figure out how the brain works once and for all.', $group_site_id = null, $group_invisible = 'false', $group_user_ids = null)
    {
        $this->groupsIdPutWithHttpInfo($id, $group_name, $group_description, $group_site_id, $group_invisible, $group_user_ids);
    }

    /**
     * Operation groupsIdPutWithHttpInfo
     *
     * Update the properties of a Group (project).
     *
     * @param  int $id ID of the Group to be updated. (required)
     * @param  string $group_name The new name of the Group. (optional, default to NewGroupName)
     * @param  string $group_description The description of the new Group. (optional, default to This project will group all of the files for a large neuroscience study to figure out how the brain works once and for all.)
     * @param  int $group_site_id The ID of the site associated with the Group. (optional)
     * @param  bool $group_invisible Specifies whether to make the group invisible or not. Invisible groups exist solely to control access to resources. (optional, default to false)
     * @param  int[] $group_user_ids An array of IDs of Users that will be members of the new Group. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupsIdPutWithHttpInfo($id, $group_name = 'NewGroupName', $group_description = 'This project will group all of the files for a large neuroscience study to figure out how the brain works once and for all.', $group_site_id = null, $group_invisible = 'false', $group_user_ids = null)
    {
        $returnType = '';
        $request = $this->groupsIdPutRequest($id, $group_name, $group_description, $group_site_id, $group_invisible, $group_user_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation groupsIdPutAsync
     *
     * Update the properties of a Group (project).
     *
     * @param  int $id ID of the Group to be updated. (required)
     * @param  string $group_name The new name of the Group. (optional, default to NewGroupName)
     * @param  string $group_description The description of the new Group. (optional, default to This project will group all of the files for a large neuroscience study to figure out how the brain works once and for all.)
     * @param  int $group_site_id The ID of the site associated with the Group. (optional)
     * @param  bool $group_invisible Specifies whether to make the group invisible or not. Invisible groups exist solely to control access to resources. (optional, default to false)
     * @param  int[] $group_user_ids An array of IDs of Users that will be members of the new Group. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsIdPutAsync($id, $group_name = 'NewGroupName', $group_description = 'This project will group all of the files for a large neuroscience study to figure out how the brain works once and for all.', $group_site_id = null, $group_invisible = 'false', $group_user_ids = null)
    {
        return $this->groupsIdPutAsyncWithHttpInfo($id, $group_name, $group_description, $group_site_id, $group_invisible, $group_user_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupsIdPutAsyncWithHttpInfo
     *
     * Update the properties of a Group (project).
     *
     * @param  int $id ID of the Group to be updated. (required)
     * @param  string $group_name The new name of the Group. (optional, default to NewGroupName)
     * @param  string $group_description The description of the new Group. (optional, default to This project will group all of the files for a large neuroscience study to figure out how the brain works once and for all.)
     * @param  int $group_site_id The ID of the site associated with the Group. (optional)
     * @param  bool $group_invisible Specifies whether to make the group invisible or not. Invisible groups exist solely to control access to resources. (optional, default to false)
     * @param  int[] $group_user_ids An array of IDs of Users that will be members of the new Group. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsIdPutAsyncWithHttpInfo($id, $group_name = 'NewGroupName', $group_description = 'This project will group all of the files for a large neuroscience study to figure out how the brain works once and for all.', $group_site_id = null, $group_invisible = 'false', $group_user_ids = null)
    {
        $returnType = '';
        $request = $this->groupsIdPutRequest($id, $group_name, $group_description, $group_site_id, $group_invisible, $group_user_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupsIdPut'
     *
     * @param  int $id ID of the Group to be updated. (required)
     * @param  string $group_name The new name of the Group. (optional, default to NewGroupName)
     * @param  string $group_description The description of the new Group. (optional, default to This project will group all of the files for a large neuroscience study to figure out how the brain works once and for all.)
     * @param  int $group_site_id The ID of the site associated with the Group. (optional)
     * @param  bool $group_invisible Specifies whether to make the group invisible or not. Invisible groups exist solely to control access to resources. (optional, default to false)
     * @param  int[] $group_user_ids An array of IDs of Users that will be members of the new Group. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupsIdPutRequest($id, $group_name = 'NewGroupName', $group_description = 'This project will group all of the files for a large neuroscience study to figure out how the brain works once and for all.', $group_site_id = null, $group_invisible = 'false', $group_user_ids = null)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling groupsIdPut'
            );
        }

        $resourcePath = '/groups/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // form params
        if ($group_name !== null) {
            $formParams['group[name]'] = ObjectSerializer::toFormValue($group_name);
        }
        // form params
        if ($group_description !== null) {
            $formParams['group[description]'] = ObjectSerializer::toFormValue($group_description);
        }
        // form params
        if ($group_site_id !== null) {
            $formParams['group[site_id]'] = ObjectSerializer::toFormValue($group_site_id);
        }
        // form params
        if ($group_invisible !== null) {
            $formParams['group[invisible]'] = ObjectSerializer::toFormValue($group_invisible);
        }
        // form params
        if ($group_user_ids !== null) {
            $formParams['group[user_ids]'] = ObjectSerializer::toFormValue($group_user_ids);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupsPost
     *
     * Creates a new Group.
     *
     * @param  string $group_name The name of the new Group. (required)
     * @param  string $group_description The description of the new Group. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  int $group_site_id The ID of the site associated with the Group. (optional)
     * @param  bool $group_invisible Specifies whether to make the group invisible or not. Invisible groups exist solely to control access to resources. (optional, default to false)
     * @param  int[] $group_user_ids An array of IDs of Users that will be members of the new Group. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function groupsPost($group_name, $group_description, $authenticity_token, $group_site_id = null, $group_invisible = 'false', $group_user_ids = null)
    {
        $this->groupsPostWithHttpInfo($group_name, $group_description, $authenticity_token, $group_site_id, $group_invisible, $group_user_ids);
    }

    /**
     * Operation groupsPostWithHttpInfo
     *
     * Creates a new Group.
     *
     * @param  string $group_name The name of the new Group. (required)
     * @param  string $group_description The description of the new Group. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  int $group_site_id The ID of the site associated with the Group. (optional)
     * @param  bool $group_invisible Specifies whether to make the group invisible or not. Invisible groups exist solely to control access to resources. (optional, default to false)
     * @param  int[] $group_user_ids An array of IDs of Users that will be members of the new Group. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupsPostWithHttpInfo($group_name, $group_description, $authenticity_token, $group_site_id = null, $group_invisible = 'false', $group_user_ids = null)
    {
        $returnType = '';
        $request = $this->groupsPostRequest($group_name, $group_description, $authenticity_token, $group_site_id, $group_invisible, $group_user_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation groupsPostAsync
     *
     * Creates a new Group.
     *
     * @param  string $group_name The name of the new Group. (required)
     * @param  string $group_description The description of the new Group. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  int $group_site_id The ID of the site associated with the Group. (optional)
     * @param  bool $group_invisible Specifies whether to make the group invisible or not. Invisible groups exist solely to control access to resources. (optional, default to false)
     * @param  int[] $group_user_ids An array of IDs of Users that will be members of the new Group. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsPostAsync($group_name, $group_description, $authenticity_token, $group_site_id = null, $group_invisible = 'false', $group_user_ids = null)
    {
        return $this->groupsPostAsyncWithHttpInfo($group_name, $group_description, $authenticity_token, $group_site_id, $group_invisible, $group_user_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupsPostAsyncWithHttpInfo
     *
     * Creates a new Group.
     *
     * @param  string $group_name The name of the new Group. (required)
     * @param  string $group_description The description of the new Group. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  int $group_site_id The ID of the site associated with the Group. (optional)
     * @param  bool $group_invisible Specifies whether to make the group invisible or not. Invisible groups exist solely to control access to resources. (optional, default to false)
     * @param  int[] $group_user_ids An array of IDs of Users that will be members of the new Group. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsPostAsyncWithHttpInfo($group_name, $group_description, $authenticity_token, $group_site_id = null, $group_invisible = 'false', $group_user_ids = null)
    {
        $returnType = '';
        $request = $this->groupsPostRequest($group_name, $group_description, $authenticity_token, $group_site_id, $group_invisible, $group_user_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupsPost'
     *
     * @param  string $group_name The name of the new Group. (required)
     * @param  string $group_description The description of the new Group. (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     * @param  int $group_site_id The ID of the site associated with the Group. (optional)
     * @param  bool $group_invisible Specifies whether to make the group invisible or not. Invisible groups exist solely to control access to resources. (optional, default to false)
     * @param  int[] $group_user_ids An array of IDs of Users that will be members of the new Group. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupsPostRequest($group_name, $group_description, $authenticity_token, $group_site_id = null, $group_invisible = 'false', $group_user_ids = null)
    {
        // verify the required parameter 'group_name' is set
        if ($group_name === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_name when calling groupsPost'
            );
        }
        // verify the required parameter 'group_description' is set
        if ($group_description === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $group_description when calling groupsPost'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling groupsPost'
            );
        }

        $resourcePath = '/groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($group_name !== null) {
            $formParams['group[name]'] = ObjectSerializer::toFormValue($group_name);
        }
        // form params
        if ($group_description !== null) {
            $formParams['group[description]'] = ObjectSerializer::toFormValue($group_description);
        }
        // form params
        if ($group_site_id !== null) {
            $formParams['group[site_id]'] = ObjectSerializer::toFormValue($group_site_id);
        }
        // form params
        if ($group_invisible !== null) {
            $formParams['group[invisible]'] = ObjectSerializer::toFormValue($group_invisible);
        }
        // form params
        if ($group_user_ids !== null) {
            $formParams['group[user_ids]'] = ObjectSerializer::toFormValue($group_user_ids);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation groupsSwitchPost
     *
     * Switches the active group.
     *
     * @param  int $id ID number of the Group to switch to (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function groupsSwitchPost($id, $authenticity_token)
    {
        $this->groupsSwitchPostWithHttpInfo($id, $authenticity_token);
    }

    /**
     * Operation groupsSwitchPostWithHttpInfo
     *
     * Switches the active group.
     *
     * @param  int $id ID number of the Group to switch to (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function groupsSwitchPostWithHttpInfo($id, $authenticity_token)
    {
        $returnType = '';
        $request = $this->groupsSwitchPostRequest($id, $authenticity_token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation groupsSwitchPostAsync
     *
     * Switches the active group.
     *
     * @param  int $id ID number of the Group to switch to (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsSwitchPostAsync($id, $authenticity_token)
    {
        return $this->groupsSwitchPostAsyncWithHttpInfo($id, $authenticity_token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation groupsSwitchPostAsyncWithHttpInfo
     *
     * Switches the active group.
     *
     * @param  int $id ID number of the Group to switch to (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function groupsSwitchPostAsyncWithHttpInfo($id, $authenticity_token)
    {
        $returnType = '';
        $request = $this->groupsSwitchPostRequest($id, $authenticity_token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'groupsSwitchPost'
     *
     * @param  int $id ID number of the Group to switch to (required)
     * @param  string $authenticity_token The token returned by /session/new (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function groupsSwitchPostRequest($id, $authenticity_token)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling groupsSwitchPost'
            );
        }
        // verify the required parameter 'authenticity_token' is set
        if ($authenticity_token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authenticity_token when calling groupsSwitchPost'
            );
        }

        $resourcePath = '/groups/switch';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // form params
        if ($id !== null) {
            $formParams['id'] = ObjectSerializer::toFormValue($id);
        }
        // form params
        if ($authenticity_token !== null) {
            $formParams['authenticity_token'] = ObjectSerializer::toFormValue($authenticity_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/xml'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('cbrain_api_token');
        if ($apiKey !== null) {
            $queryParams['cbrain_api_token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
